// routes/marketingRoutes.js

const express = require('express');
const router = express.Router();
const crypto = require('crypto');

// 1. Add this import at the top of the file
const { mockReportData } = require('../logic/mockReportData');

// 2. Add this switch at the top of the file
const USE_MOCK_DATA = false; // Set to `false` to use the real OpenAI A

// NOTE: You will need to create these data files from your master question file.
// marketing-assessment-data.js should export the array of 213 question objects.
// marketing-answer-key.js should export an object mapping questionId to the correct answer for MCQs.
const { marketingQuestions } = require('../data/marketing-assessment-data.js');
const { marketingAnswerKey } = require('../data/marketing-answer-key.js');

// Import all the new specialist functions from the file created by DeepSeek
const {
  calculateScores,
  generateExecutiveSummary,
  generateStrategicJudgmentReport,
  generateBrandCommAcumenReport,
  generateCommercialAcumenReport,
  generateLeadershipTeamOrientationReport,
  generateResourceAllocationDisciplineReport,
  generateCommercialGrowthOrientationReport,
  generateFoundationsOfStrategyReport,
  generateBrandAndCommunicationsKnowledgeReport,
  generatePricingAndChannelsKnowledgeReport,
  generatePaucityOfBudgetsKnowledgeReport,
  generateDigitalAndDataKnowledgeReport,
  generateGlobalAndCulturalKnowledgeReport,
  generateFutureAndThoughtLeadershipKnowledgeReport,
  generateStrategyAndPositioningApplicationReport,
  generateBrandAndCommunicationApplicationReport,
  generateCustomerAndGrowthApplicationReport,
  generateChannelsAndDistributionApplicationReport,
  generatePricingAndMonetizationApplicationReport,
  generateMarketingBudgetsApplicationReport,
  generateExecutionAndPrioritizationDisciplineReport,
  generateSelfAwarenessAndReflectionReport,
  generateCreativityAndNarrativePowerReport,
  generateAnalyticsKnowledgeReport
} = require('../logic/marketing-ai-specialists.js');

// A single, shared, in-memory job store for this assessment
const marketingReportJobs = {};

// --- API ROUTES ---

// Endpoint to serve the questions to the frontend
router.get('/questions', (req, res) => {
  try {
    // In a real app, you might want to randomize the order of questions here
    // before sending them to the client, as per the PDF's instructions.
    res.json(marketingQuestions);
  } catch (error) {
    console.error("Error fetching Marketing Quotient questions:", error);
    res.status(500).json({ error: 'Failed to fetch questions.' });
  }
});

// Endpoint to submit answers and start the report generation
router.post('/submit', async (req, res) => {
  const { answers, userInfo } = req.body;
  const jobId = crypto.randomUUID();

  res.status(202).json({ jobId });

  if (USE_MOCK_DATA) {
    console.log(`USING MOCK DATA for job: ${jobId}`);
    marketingReportJobs[jobId] = { status: 'processing', report: null };
    // Simulate a short delay to feel like a real API call
    setTimeout(() => {
      marketingReportJobs[jobId] = { status: 'completed', report: mockReportData };
      console.log(`Mock report COMPLETED for job: ${jobId}`);
    }, 3000); // 3-second delay
    return;
  }

  // --- This is the original code for the real AI generation ---
  try {
    console.log(`Starting Marketing Influence Quotient report generation for job: ${jobId}`);
    marketingReportJobs[jobId] = { status: 'processing', report: null };

    const scoredResults = calculateScores(answers, marketingAnswerKey);
    
    // ... (The entire Promise.all block for all the AI calls)
    const reportPieces = await Promise.all([/* ... all your AI function calls ... */]);

    const finalReport = { /* ... assemble the final report ... */ };

    console.log("FINAL REPORT OBJECT being stored:", JSON.stringify(finalReport, null, 2));
    marketingReportJobs[jobId] = { status: 'completed', report: finalReport };
    console.log(`Marketing Influence Quotient report COMPLETED for job: ${jobId}`);

  } catch (error) {
    console.error(`Error in background marketing report generation for job ${jobId}:`, error);
    marketingReportJobs[jobId] = { status: 'failed', report: null };
  }
});

// Endpoint for the frontend to poll for the report status
router.get('/status/:jobId', (req, res) => {
  const { jobId } = req.params;
  const job = marketingReportJobs[jobId];

  if (!job) {
    return res.status(404).json({ error: 'Job not found' });
  }
  res.json({ status: job.status, report: job.report });
});

module.exports = router;